{"version":3,"sources":["Components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Grid","props","useEffect","visited","length","i","setTimeout","targets","anime","scale","value","easing","duration","backgroundColor","GridStyle","temp","columns","result","rows","j","push","className","style","map","val","index","Handle","Slider","App","type","useParams","useLocation","useState","setRows","setColumns","reset","pVisit","setPVisit","directionR","directionC","starting_point","queue","stack","start","a","bfs","dfs","current_point","pop","current_point_x","current_point_y","neighbouring_points","getNeighbouringPoints","shift","newR","newC","includes","isInQueue","min","max","defaultValue","handle","dragging","restProps","prefixCls","overlay","visible","placement","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","to","activeClassName","exact","from","path","document","getElementById"],"mappings":"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","file":"static/js/main.b168b72a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\n\nfunction Grid(props) {\n    useEffect(() => {\n        if (props.visited.length > 0) {\n            for (let i = 0; i < props.visited.length; i++) {\n                setTimeout(() => {\n                    let targets = \".grid-item .gItem\" + (props.visited[i])\n                    anime({\n                        targets,\n\n                        scale: [\n                            { value: .5, easing: 'easeOutSine', duration: 500 },\n                            { value: 1, easing: 'easeInOutQuad', duration: 1000 }\n                        ],\n                        easing: \"easeOutSine\",\n                        backgroundColor: '#57bb66',\n                        duration: 800\n                    });\n                }, 50 * i)\n            }\n        }\n    }, [props.visited])\n\n    let GridStyle = {\n        \"display\": \"grid\",\n        \"grid-column-gap\": \"5px\",\n        \"grid-row-gap\": \"5px\",\n        \"grid-template-columns\": (() => {\n            let temp = \"\"\n            for (let i = 0; i < props.columns; i++) {\n                temp += \"auto \"\n            }\n            return temp\n        })()\n    }\n\n    let result = []\n    for (let i = 0; i < props.rows; i++) {\n        for (let j = 0; j < props.columns; j++) {\n            result.push(<div className={\"grid-item\"}>\n                <div className={\"gridStyle\" + \" gItem\" + i + j}>\n\n                </div>\n            </div >)\n        }\n\n    }\n    return <div className=\"grid-container\" style={GridStyle}>\n        {\n            result.map((val, index) => {\n                return val\n            })\n        }\n    </div>\n}\n\n\nexport default Grid;\n","import './App.css';\nimport Grid from './Components/Grid'\nimport { useEffect, useState } from 'react';\nimport { useParams } from \"react-router\";\nimport { useHistory, useLocation } from 'react-router-dom'\nimport anime from 'animejs/lib/anime.es.js';\nimport Slider, { Range, SliderTooltip } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nconst { Handle } = Slider;\nfunction App() {\n  let { type } = useParams()\n  let location = useLocation()\n  let [rows, setRows] = useState(15)\n  let [columns, setColumns] = useState(15)\n\n  useEffect(() => {\n    reset()\n  }, [type])\n\n  let [pVisit, setPVisit] = useState([])\n\n  let directionR = [-1, 0, 1, 1, 1, 0, -1, -1]\n  let directionC = [-1, -1, -1, 0, 1, 1, 1, 0]\n\n  let starting_point = [0, 0]\n\n  let visited = []\n  let queue = []\n  let stack = []\n\n  queue.push(starting_point)\n  stack.push(starting_point)\n\n  let start = async () => {\n    if (type === \"bfs\") {\n      bfs()\n    } else {\n      dfs()\n    }\n  }\n  let dfs = async () => {\n    while (stack.length > 0) {\n      let current_point = stack.pop()\n      let current_point_x = current_point[0]\n      let current_point_y = current_point[1]\n      visited.push(\"\" + current_point_x + current_point_y)\n      setPVisit(visited)\n      let neighbouring_points = getNeighbouringPoints(current_point, visited, stack)\n      if (neighbouring_points.length > 0) {\n        stack.push(...neighbouring_points)\n      }\n\n    }\n    return\n\n  }\n  let bfs = async () => {\n    while (queue.length > 0) {\n      let current_point = queue.shift()\n      let current_point_x = current_point[0]\n      let current_point_y = current_point[1]\n      visited.push(\"\" + current_point_x + current_point_y)\n      setPVisit(visited)\n      let neighbouring_points = getNeighbouringPoints(current_point, visited, queue)\n      if (neighbouring_points.length > 0) {\n        queue.push(...neighbouring_points)\n      }\n\n    }\n    return\n  }\n\n  let getNeighbouringPoints = (current_point, visited, queue) => {\n    let result = []\n    for (let i = 0; i < 8; i++) {\n      let newR = current_point[0] + directionR[i]\n      let newC = current_point[1] + directionC[i]\n      if (newR > rows - 1 || newC > columns - 1) {\n        continue\n      }\n      if (newR < 0 || newC < 0) {\n        continue\n      }\n      if (visited.includes(\"\" + newR + newC)) {\n        continue\n      }\n      let isInQueue = false\n      queue.map((val, index) => {\n        if (newR == val[0] && newC == val[1]) {\n          isInQueue = true\n          return\n        }\n      })\n      if (isInQueue) {\n        continue\n      }\n      // debugger\n      result.push([newR, newC])\n      // if (newR)\n\n\n    }\n    return result\n\n  }\n\n  let reset = () => {\n    visited = []\n    setPVisit([])\n    queue = []\n    let targets = \".gridStyle\"\n    anime({\n      targets,\n\n      scale: [\n        { value: .5, easing: 'easeOutSine', duration: 500 },\n        { value: 1, easing: 'easeInOutQuad', duration: 1000 }\n      ],\n      easing: \"easeOutSine\",\n      backgroundColor: '#2e4d39',\n      duration: 800\n    });\n\n  }\n  const handle = props => {\n    const { value, dragging, index, ...restProps } = props;\n    setColumns(value)\n    setRows(value)\n    // reset()\n    return (\n      <SliderTooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={`${value}`}\n        visible={dragging}\n        placement=\"top\"\n        key={index}\n      >\n        <Handle value={value} {...restProps} />\n      </SliderTooltip>\n    );\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">\n        Visualization Algorithms In React\n          </h1>\n      <div className=\"App\">\n        <div className=\"container\">\n          <div>\n          </div>\n          <Slider min={1} max={30} defaultValue={15} handle={handle} />\n          <div className=\"btn-container\">\n\n            <button onClick={start}>start</button>\n            <button onClick={reset}>reset</button>\n          </div>\n\n          <Grid\n            rows={rows}\n            columns={columns}\n            visited={pVisit}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  NavLink\n\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <div className=\"link-con\">\n        <NavLink to=\"/dfs\" activeClassName=\"active\">\n          /depth-first-search\n        </NavLink>\n        <NavLink to=\"/bfs\" activeClassName=\"active\">\n          /breadth-first-search\n        </NavLink>\n      </div>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/dfs\" />\n        <Route exact path=\"/:type\">\n          <App />\n        </Route>\n\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}